import org.bouncycastle.asn1.x500.X500Name;
import org.bouncycastle.cert.X509CertificateHolder;
import org.bouncycastle.cert.X509v3CertificateBuilder;
import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;
import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.operator.ContentSigner;
import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;

import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.io.FileOutputStream;
import java.math.BigInteger;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.*;
import java.security.cert.X509Certificate;
import java.util.Date;

public class BouncyCastleJksWithRSAandAES {

    public static void main(String[] args) throws Exception {
        String keystorePath = "src/test/resources/keystore_E1.jks";
        String keystorePassword = "amex123";
        String rsaAlias = "enterprisewallet_encryption_e2_2018_20";
        String aesAlias = "enterprisewallet_encryption_e2_2015_16";

        generateJKSWithRSAAndAES(keystorePath, keystorePassword, rsaAlias, aesAlias);
        System.out.println("âœ… JKS created at: " + keystorePath);
    }

    public static void generateJKSWithRSAAndAES(String jksPath, String password,
                                                String rsaAlias, String aesAlias) throws Exception {
        Security.addProvider(new BouncyCastleProvider());

        Files.createDirectories(Paths.get(jksPath).getParent());

        // Create RSA keypair
        KeyPairGenerator rsaGen = KeyPairGenerator.getInstance("RSA", "BC");
        rsaGen.initialize(2048);
        KeyPair rsaKeyPair = rsaGen.generateKeyPair();

        // Create self-signed cert
        X500Name subject = new X500Name("CN=Test Cert, O=Amex, C=IN");
        BigInteger serial = BigInteger.valueOf(System.currentTimeMillis());
        Date notBefore = new Date();
        Date notAfter = new Date(System.currentTimeMillis() + 365L * 24 * 60 * 60 * 1000);

        ContentSigner signer = new JcaContentSignerBuilder("SHA256withRSA").build(rsaKeyPair.getPrivate());
        X509v3CertificateBuilder certBuilder = new JcaX509v3CertificateBuilder(
                subject, serial, notBefore, notAfter, subject, rsaKeyPair.getPublic());

        X509CertificateHolder certHolder = certBuilder.build(signer);
        X509Certificate cert = new JcaX509CertificateConverter().setProvider("BC").getCertificate(certHolder);

        // Generate AES key (symmetric)
        KeyGenerator aesGen = KeyGenerator.getInstance("AES");
        aesGen.init(256); // or 128
        SecretKey aesKey = aesGen.generateKey();

        // Create and store in KeyStore
        KeyStore keyStore = KeyStore.getInstance("JKS");
        keyStore.load(null, password.toCharArray());

        // 1. Store RSA private key + certificate
        keyStore.setKeyEntry(rsaAlias, rsaKeyPair.getPrivate(), password.toCharArray(), new X509Certificate[]{cert});

        // 2. Store AES secret key
        KeyStore.SecretKeyEntry aesEntry = new KeyStore.SecretKeyEntry(aesKey);
        KeyStore.ProtectionParameter protParam = new KeyStore.PasswordProtection(password.toCharArray());
        keyStore.setEntry(aesAlias, aesEntry, protParam);

        try (FileOutputStream fos = new FileOutputStream(jksPath)) {
            keyStore.store(fos, password.toCharArray());
        }
    }
}
